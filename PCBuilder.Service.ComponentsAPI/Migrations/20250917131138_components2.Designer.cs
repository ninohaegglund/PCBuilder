// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PCBuilder.Service.ComponentsAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250917131138_components2")]
    partial class components2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BaseClockGhz")
                        .HasColumnType("float");

                    b.Property<double>("BoostClockGhz")
                        .HasColumnType("float");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CPUs");
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoiseLevelDb")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CPUCoolers");
                });

            modelBuilder.Entity("DisplayMonitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Hz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SizeInches")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("Monitors");
                });

            modelBuilder.Entity("GPU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("VramGb")
                        .HasColumnType("int");

                    b.Property<string>("VramType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("GPUs");
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUCoolingId")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CPUCoolingId");

                    b.ToTable("CoolerSocketCompatibility");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.Computer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CPUId")
                        .HasColumnType("int");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("CpuCoolerId")
                        .HasColumnType("int");

                    b.Property<int?>("HeadsetId")
                        .HasColumnType("int");

                    b.Property<int?>("KeyboardId")
                        .HasColumnType("int");

                    b.Property<int?>("MotherboardId")
                        .HasColumnType("int");

                    b.Property<int?>("MouseId")
                        .HasColumnType("int");

                    b.Property<int?>("PSUId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CPUId")
                        .IsUnique()
                        .HasFilter("[CPUId] IS NOT NULL");

                    b.HasIndex("CaseId")
                        .IsUnique()
                        .HasFilter("[CaseId] IS NOT NULL");

                    b.HasIndex("CpuCoolerId")
                        .IsUnique()
                        .HasFilter("[CpuCoolerId] IS NOT NULL");

                    b.HasIndex("HeadsetId")
                        .IsUnique()
                        .HasFilter("[HeadsetId] IS NOT NULL");

                    b.HasIndex("KeyboardId")
                        .IsUnique()
                        .HasFilter("[KeyboardId] IS NOT NULL");

                    b.HasIndex("MotherboardId")
                        .IsUnique()
                        .HasFilter("[MotherboardId] IS NOT NULL");

                    b.HasIndex("MouseId")
                        .IsUnique()
                        .HasFilter("[MouseId] IS NOT NULL");

                    b.HasIndex("PSUId")
                        .IsUnique()
                        .HasFilter("[PSUId] IS NOT NULL");

                    b.ToTable("Computers");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.PCIe.PCIeCable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthCm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("PCIeCables");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.PowerCable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthCm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("PowerCables");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.SataCable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRightAngled")
                        .HasColumnType("bit");

                    b.Property<int>("LengthCm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("SataCables");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChassiMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGpuLengthMm")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<int>("FanSizeMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("ChassiCooling");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Headsets");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("HasBacklight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMechanical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SizePercent")
                        .HasColumnType("int");

                    b.Property<string>("SwitchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Keyboards");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Dpi")
                        .HasColumnType("int");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfButtons")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Mice");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Watt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("Speakers");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRamCapacityGb")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PcieSlots")
                        .HasColumnType("int");

                    b.Property<int>("RamSlots")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedRamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Motherboards");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EfficiencyRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PSUs");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeedMHz")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("RAMModules");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<int>("ReadSpeedMb")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeedMb")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ComputerId");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("DisplayMonitor", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("Monitor")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("GPU", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("GPU")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.HasOne("CPUCooling", "CPUCooling")
                        .WithMany("CompatibleSockets")
                        .HasForeignKey("CPUCoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPUCooling");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.Computer", b =>
                {
                    b.HasOne("CPU", "Cpu")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "CPUId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", "Case")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "CaseId");

                    b.HasOne("CPUCooling", "CPUCooler")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "CpuCoolerId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", "Headset")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "HeadsetId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", "Keyboard")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "KeyboardId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", "Motherboard")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "MotherboardId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", "Mouse")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "MouseId");

                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", "PSU")
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.Computer", "PSUId");

                    b.Navigation("CPUCooler");

                    b.Navigation("Case");

                    b.Navigation("Cpu");

                    b.Navigation("Headset");

                    b.Navigation("Keyboard");

                    b.Navigation("Motherboard");

                    b.Navigation("Mouse");

                    b.Navigation("PSU");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.PCIe.PCIeCable", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("PCIeCables")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.PowerCable", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("PowerCables")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cables.SataCable", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("SataCables")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("CaseFans")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("Speakers")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("RamModules")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", b =>
                {
                    b.HasOne("PCBuilder.Services.ComponentsAPI.Models.Computer", "Computer")
                        .WithMany("Storage")
                        .HasForeignKey("ComputerId");

                    b.Navigation("Computer");
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.Navigation("CompatibleSockets");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.Computer", b =>
                {
                    b.Navigation("CaseFans");

                    b.Navigation("GPU");

                    b.Navigation("Monitor");

                    b.Navigation("PCIeCables");

                    b.Navigation("PowerCables");

                    b.Navigation("RamModules");

                    b.Navigation("SataCables");

                    b.Navigation("Speakers");

                    b.Navigation("Storage");
                });
#pragma warning restore 612, 618
        }
    }
}
