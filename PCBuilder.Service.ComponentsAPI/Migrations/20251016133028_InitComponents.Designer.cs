// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PCBuilder.Service.ComponentsAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251016133028_InitComponents")]
    partial class InitComponents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.Components", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasDiscriminator().HasValue("Components");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUCoolingId")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CPUCoolingId");

                    b.ToTable("CoolerSocketCompatibility");
                });

            modelBuilder.Entity("CPU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<double>("BaseClockGhz")
                        .HasColumnType("float");

                    b.Property<double>("BoostClockGhz")
                        .HasColumnType("float");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("CPU_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("CPU_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("CPU_ModelName");

                            t.Property("PerformanceScore")
                                .HasColumnName("CPU_PerformanceScore");

                            t.Property("PowerConsumptionW")
                                .HasColumnName("CPU_PowerConsumptionW");

                            t.Property("Price")
                                .HasColumnName("CPU_Price");

                            t.Property("TDP")
                                .HasColumnName("CPU_TDP");
                        });

                    b.HasDiscriminator().HasValue("CPU");
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoiseLevelDb")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("CPUCooling_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("CPUCooling_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("CPUCooling_ModelName");

                            t.Property("Price")
                                .HasColumnName("CPUCooling_Price");
                        });

                    b.HasDiscriminator().HasValue("CPUCooling");
                });

            modelBuilder.Entity("DisplayMonitor", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SizeInches")
                        .HasColumnType("float");

                    b.ToTable("Components", t =>
                        {
                            t.Property("ComputerId")
                                .HasColumnName("DisplayMonitor_ComputerId");

                            t.Property("Description")
                                .HasColumnName("DisplayMonitor_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("DisplayMonitor_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("DisplayMonitor_ModelName");

                            t.Property("Price")
                                .HasColumnName("DisplayMonitor_Price");
                        });

                    b.HasDiscriminator().HasValue("DisplayMonitor");
                });

            modelBuilder.Entity("GPU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("VramGb")
                        .HasColumnType("int");

                    b.Property<string>("VramType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("GPU");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("ChassiMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGpuLengthMm")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Chassi_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("Chassi_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Chassi_ModelName");

                            t.Property("Price")
                                .HasColumnName("Chassi_Price");
                        });

                    b.HasDiscriminator().HasValue("Chassi");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FanSizeMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.ToTable("Components", t =>
                        {
                            t.Property("ComputerId")
                                .HasColumnName("ChassiCooling_ComputerId");

                            t.Property("CoolingCapacityW")
                                .HasColumnName("ChassiCooling_CoolingCapacityW");

                            t.Property("Description")
                                .HasColumnName("ChassiCooling_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("ChassiCooling_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("ChassiCooling_ModelName");

                            t.Property("Price")
                                .HasColumnName("ChassiCooling_Price");
                        });

                    b.HasDiscriminator().HasValue("ChassiCooling");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Headset_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("Headset_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Headset_ModelName");

                            t.Property("Price")
                                .HasColumnName("Headset_Price");
                        });

                    b.HasDiscriminator().HasValue("Headset");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBacklight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMechanical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SizePercent")
                        .HasColumnType("int");

                    b.Property<string>("SwitchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Keyboard_Description");

                            t.Property("IsWireless")
                                .HasColumnName("Keyboard_IsWireless");

                            t.Property("Manufacturer")
                                .HasColumnName("Keyboard_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Keyboard_ModelName");

                            t.Property("Price")
                                .HasColumnName("Keyboard_Price");
                        });

                    b.HasDiscriminator().HasValue("Keyboard");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dpi")
                        .HasColumnType("int");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfButtons")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Mouse_Description");

                            t.Property("IsWireless")
                                .HasColumnName("Mouse_IsWireless");

                            t.Property("Manufacturer")
                                .HasColumnName("Mouse_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Mouse_ModelName");

                            t.Property("Price")
                                .HasColumnName("Mouse_Price");
                        });

                    b.HasDiscriminator().HasValue("Mouse");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Watt")
                        .HasColumnType("int");

                    b.ToTable("Components", t =>
                        {
                            t.Property("ComputerId")
                                .HasColumnName("Speaker_ComputerId");

                            t.Property("Description")
                                .HasColumnName("Speaker_Description");

                            t.Property("IsWireless")
                                .HasColumnName("Speaker_IsWireless");

                            t.Property("Manufacturer")
                                .HasColumnName("Speaker_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Speaker_ModelName");

                            t.Property("Price")
                                .HasColumnName("Speaker_Price");
                        });

                    b.HasDiscriminator().HasValue("Speaker");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRamCapacityGb")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PcieSlots")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RamSlots")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedRamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("Motherboard_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("Motherboard_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("Motherboard_ModelName");

                            t.Property("Price")
                                .HasColumnName("Motherboard_Price");

                            t.Property("Socket")
                                .HasColumnName("Motherboard_Socket");
                        });

                    b.HasDiscriminator().HasValue("Motherboard");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EfficiencyRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.ToTable("Components", t =>
                        {
                            t.Property("Description")
                                .HasColumnName("PSU_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("PSU_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("PSU_ModelName");

                            t.Property("PowerConsumptionW")
                                .HasColumnName("PSU_PowerConsumptionW");

                            t.Property("Price")
                                .HasColumnName("PSU_Price");
                        });

                    b.HasDiscriminator().HasValue("PSU");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpeedMHz")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Components", t =>
                        {
                            t.Property("ComputerId")
                                .HasColumnName("RAM_ComputerId");

                            t.Property("Description")
                                .HasColumnName("RAM_Description");

                            t.Property("Manufacturer")
                                .HasColumnName("RAM_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("RAM_ModelName");

                            t.Property("Price")
                                .HasColumnName("RAM_Price");

                            t.Property("Type")
                                .HasColumnName("RAM_Type");
                        });

                    b.HasDiscriminator().HasValue("RAM");
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReadSpeedMb")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeedMb")
                        .HasColumnType("int");

                    b.ToTable("Components", t =>
                        {
                            t.Property("CapacityGb")
                                .HasColumnName("StorageDevice_CapacityGb");

                            t.Property("ComputerId")
                                .HasColumnName("StorageDevice_ComputerId");

                            t.Property("Description")
                                .HasColumnName("StorageDevice_Description");

                            t.Property("Interface")
                                .HasColumnName("StorageDevice_Interface");

                            t.Property("Manufacturer")
                                .HasColumnName("StorageDevice_Manufacturer");

                            t.Property("ModelName")
                                .HasColumnName("StorageDevice_ModelName");

                            t.Property("PowerConsumptionW")
                                .HasColumnName("StorageDevice_PowerConsumptionW");

                            t.Property("Price")
                                .HasColumnName("StorageDevice_Price");
                        });

                    b.HasDiscriminator().HasValue("StorageDevice");
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.HasOne("CPUCooling", "CPUCooling")
                        .WithMany("CompatibleSockets")
                        .HasForeignKey("CPUCoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPUCooling");
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.Navigation("CompatibleSockets");
                });
#pragma warning restore 612, 618
        }
    }
}
