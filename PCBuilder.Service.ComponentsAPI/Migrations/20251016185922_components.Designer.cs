// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PCBuilder.Service.ComponentsAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20251016185922_components")]
    partial class components
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.Components", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Components", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CPUCoolingId")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CPUCoolingId");

                    b.ToTable("CoolerSocketCompatibility");
                });

            modelBuilder.Entity("CPU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<double>("BaseClockGhz")
                        .HasColumnType("float");

                    b.Property<double>("BoostClockGhz")
                        .HasColumnType("float");

                    b.Property<int>("Cores")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("Threads")
                        .HasColumnType("int");

                    b.ToTable("CPUs", (string)null);
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoiseLevelDb")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CPUCoolers", (string)null);
                });

            modelBuilder.Entity("DisplayMonitor", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Hz")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Resolution")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SizeInches")
                        .HasColumnType("float");

                    b.ToTable("Monitors", (string)null);
                });

            modelBuilder.Entity("GPU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LengthMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PerformanceScore")
                        .HasColumnType("int");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TDP")
                        .HasColumnType("int");

                    b.Property<int>("VramGb")
                        .HasColumnType("int");

                    b.Property<string>("VramType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("GPUs", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("ChassiMaterial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormFactor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGpuLengthMm")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Cases", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<int>("CoolingCapacityW")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FanSizeMm")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Rpm")
                        .HasColumnType("int");

                    b.ToTable("ChassiCooling", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMicrophone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Headsets", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBacklight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMechanical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Layout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SizePercent")
                        .HasColumnType("int");

                    b.Property<string>("SwitchType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Keyboards", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Dpi")
                        .HasColumnType("int");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfButtons")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Mice", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsWireless")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Watt")
                        .HasColumnType("int");

                    b.ToTable("Speakers", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Chipset")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxRamCapacityGb")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PcieSlots")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RamSlots")
                        .HasColumnType("int");

                    b.Property<string>("Socket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupportedRamType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Motherboards", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EfficiencyRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Wattage")
                        .HasColumnType("int");

                    b.ToTable("PSUs", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpeedMHz")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RAMModules", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", b =>
                {
                    b.HasBaseType("PCBuilder.Service.ComponentsAPI.Models.Components");

                    b.Property<int>("CapacityGb")
                        .HasColumnType("int");

                    b.Property<int?>("ComputerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interface")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerConsumptionW")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReadSpeedMb")
                        .HasColumnType("int");

                    b.Property<int>("WriteSpeedMb")
                        .HasColumnType("int");

                    b.ToTable("Storages", (string)null);
                });

            modelBuilder.Entity("PCBuilder.Service.ComponentsAPI.Models.ComputerParts.Cooling.CoolerSocketCompatibility", b =>
                {
                    b.HasOne("CPUCooling", "CPUCooling")
                        .WithMany("CompatibleSockets")
                        .HasForeignKey("CPUCoolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CPUCooling");
                });

            modelBuilder.Entity("CPU", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("CPU", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("CPUCooling", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DisplayMonitor", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("DisplayMonitor", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GPU", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("GPU", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Chassi.Chassi", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Cooling.ChassiCooling", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Headsets.Headset", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Keyboards.Keyboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Mice.Mouse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.IO.Speakers.Speaker", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.Motherboards.Motherboard", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.PSUs.PSU", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.RAM.RAM", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", b =>
                {
                    b.HasOne("PCBuilder.Service.ComponentsAPI.Models.Components", null)
                        .WithOne()
                        .HasForeignKey("PCBuilder.Services.ComponentsAPI.Models.ComputerParts.StorageDevice.StorageDevice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CPUCooling", b =>
                {
                    b.Navigation("CompatibleSockets");
                });
#pragma warning restore 612, 618
        }
    }
}
